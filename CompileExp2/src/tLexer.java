// Generated from t.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class tLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		IF=1, THEN=2, ELSE=3, WHILE=4, DO=5, ADD=6, SUB=7, MUL=8, DIV=9, RT=10, 
		LT=11, ASSIGN=12, EQUAL=13, LP=14, RP=15, LBP=16, RBP=17, SEMICOLON=18, 
		INT8=19, INT10=20, INT16=21, REAL8=22, REAL10=23, REAL16=24, IDN=25, WS=26;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'"
	};
	public static final String[] ruleNames = {
		"IF", "THEN", "ELSE", "WHILE", "DO", "ADD", "SUB", "MUL", "DIV", "RT", 
		"LT", "ASSIGN", "EQUAL", "LP", "RP", "LBP", "RBP", "SEMICOLON", "INT8", 
		"INT10", "INT16", "REAL8", "REAL10", "REAL16", "IDN", "WS", "DIGIT", "LETTER"
	};


	public tLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "t.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\34\u00e2\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\3\2\3\2\3\2\3\3\3\3\3\3"+
		"\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3"+
		"\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17"+
		"\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\7\24p\n\24"+
		"\f\24\16\24s\13\24\3\25\3\25\3\25\7\25x\n\25\f\25\16\25{\13\25\5\25}\n"+
		"\25\3\26\3\26\3\26\3\26\7\26\u0083\n\26\f\26\16\26\u0086\13\26\3\27\3"+
		"\27\3\27\7\27\u008b\n\27\f\27\16\27\u008e\13\27\3\27\3\27\3\27\7\27\u0093"+
		"\n\27\f\27\16\27\u0096\13\27\3\30\3\30\3\30\7\30\u009b\n\30\f\30\16\30"+
		"\u009e\13\30\5\30\u00a0\n\30\3\30\3\30\3\30\7\30\u00a5\n\30\f\30\16\30"+
		"\u00a8\13\30\3\31\3\31\3\31\3\31\7\31\u00ae\n\31\f\31\16\31\u00b1\13\31"+
		"\3\31\3\31\3\31\7\31\u00b6\n\31\f\31\16\31\u00b9\13\31\3\32\3\32\3\32"+
		"\7\32\u00be\n\32\f\32\16\32\u00c1\13\32\3\32\3\32\7\32\u00c5\n\32\f\32"+
		"\16\32\u00c8\13\32\3\32\3\32\3\32\5\32\u00cd\n\32\3\32\3\32\7\32\u00d1"+
		"\n\32\f\32\16\32\u00d4\13\32\5\32\u00d6\n\32\3\33\6\33\u00d9\n\33\r\33"+
		"\16\33\u00da\3\33\3\33\3\34\3\34\3\35\3\35\2\2\36\3\3\5\4\7\5\t\6\13\7"+
		"\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25"+
		")\26+\27-\30/\31\61\32\63\33\65\34\67\29\2\3\2\n\3\2\629\3\2\63;\3\2\62"+
		";\4\2ZZzz\4\2\62;ch\4\2\60\60aa\5\2\13\f\17\17\"\"\4\2C\\c|\u00f3\2\3"+
		"\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2"+
		"\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31"+
		"\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2"+
		"\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2"+
		"\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\3;\3\2\2\2\5>\3\2\2\2\7C\3\2\2\2"+
		"\tH\3\2\2\2\13N\3\2\2\2\rQ\3\2\2\2\17S\3\2\2\2\21U\3\2\2\2\23W\3\2\2\2"+
		"\25Y\3\2\2\2\27[\3\2\2\2\31]\3\2\2\2\33`\3\2\2\2\35b\3\2\2\2\37d\3\2\2"+
		"\2!f\3\2\2\2#h\3\2\2\2%j\3\2\2\2\'l\3\2\2\2)|\3\2\2\2+~\3\2\2\2-\u0087"+
		"\3\2\2\2/\u009f\3\2\2\2\61\u00a9\3\2\2\2\63\u00ba\3\2\2\2\65\u00d8\3\2"+
		"\2\2\67\u00de\3\2\2\29\u00e0\3\2\2\2;<\7k\2\2<=\7h\2\2=\4\3\2\2\2>?\7"+
		"v\2\2?@\7j\2\2@A\7g\2\2AB\7p\2\2B\6\3\2\2\2CD\7g\2\2DE\7n\2\2EF\7u\2\2"+
		"FG\7g\2\2G\b\3\2\2\2HI\7y\2\2IJ\7j\2\2JK\7k\2\2KL\7n\2\2LM\7g\2\2M\n\3"+
		"\2\2\2NO\7f\2\2OP\7q\2\2P\f\3\2\2\2QR\7-\2\2R\16\3\2\2\2ST\7/\2\2T\20"+
		"\3\2\2\2UV\7,\2\2V\22\3\2\2\2WX\7\61\2\2X\24\3\2\2\2YZ\7@\2\2Z\26\3\2"+
		"\2\2[\\\7>\2\2\\\30\3\2\2\2]^\7<\2\2^_\7?\2\2_\32\3\2\2\2`a\7?\2\2a\34"+
		"\3\2\2\2bc\7*\2\2c\36\3\2\2\2de\7+\2\2e \3\2\2\2fg\7}\2\2g\"\3\2\2\2h"+
		"i\7\177\2\2i$\3\2\2\2jk\7=\2\2k&\3\2\2\2lm\7\62\2\2mq\t\2\2\2np\t\2\2"+
		"\2on\3\2\2\2ps\3\2\2\2qo\3\2\2\2qr\3\2\2\2r(\3\2\2\2sq\3\2\2\2t}\7\62"+
		"\2\2uy\t\3\2\2vx\t\4\2\2wv\3\2\2\2x{\3\2\2\2yw\3\2\2\2yz\3\2\2\2z}\3\2"+
		"\2\2{y\3\2\2\2|t\3\2\2\2|u\3\2\2\2}*\3\2\2\2~\177\7\62\2\2\177\u0080\t"+
		"\5\2\2\u0080\u0084\t\6\2\2\u0081\u0083\t\6\2\2\u0082\u0081\3\2\2\2\u0083"+
		"\u0086\3\2\2\2\u0084\u0082\3\2\2\2\u0084\u0085\3\2\2\2\u0085,\3\2\2\2"+
		"\u0086\u0084\3\2\2\2\u0087\u0088\7\62\2\2\u0088\u008c\t\2\2\2\u0089\u008b"+
		"\t\2\2\2\u008a\u0089\3\2\2\2\u008b\u008e\3\2\2\2\u008c\u008a\3\2\2\2\u008c"+
		"\u008d\3\2\2\2\u008d\u008f\3\2\2\2\u008e\u008c\3\2\2\2\u008f\u0090\7\60"+
		"\2\2\u0090\u0094\t\2\2\2\u0091\u0093\t\2\2\2\u0092\u0091\3\2\2\2\u0093"+
		"\u0096\3\2\2\2\u0094\u0092\3\2\2\2\u0094\u0095\3\2\2\2\u0095.\3\2\2\2"+
		"\u0096\u0094\3\2\2\2\u0097\u00a0\7\62\2\2\u0098\u009c\t\3\2\2\u0099\u009b"+
		"\t\4\2\2\u009a\u0099\3\2\2\2\u009b\u009e\3\2\2\2\u009c\u009a\3\2\2\2\u009c"+
		"\u009d\3\2\2\2\u009d\u00a0\3\2\2\2\u009e\u009c\3\2\2\2\u009f\u0097\3\2"+
		"\2\2\u009f\u0098\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00a2\7\60\2\2\u00a2"+
		"\u00a6\5\67\34\2\u00a3\u00a5\5\67\34\2\u00a4\u00a3\3\2\2\2\u00a5\u00a8"+
		"\3\2\2\2\u00a6\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\60\3\2\2\2\u00a8"+
		"\u00a6\3\2\2\2\u00a9\u00aa\7\62\2\2\u00aa\u00ab\t\5\2\2\u00ab\u00af\t"+
		"\6\2\2\u00ac\u00ae\t\6\2\2\u00ad\u00ac\3\2\2\2\u00ae\u00b1\3\2\2\2\u00af"+
		"\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b2\3\2\2\2\u00b1\u00af\3\2"+
		"\2\2\u00b2\u00b3\7\60\2\2\u00b3\u00b7\t\6\2\2\u00b4\u00b6\t\6\2\2\u00b5"+
		"\u00b4\3\2\2\2\u00b6\u00b9\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3\2"+
		"\2\2\u00b8\62\3\2\2\2\u00b9\u00b7\3\2\2\2\u00ba\u00d5\59\35\2\u00bb\u00be"+
		"\59\35\2\u00bc\u00be\5\67\34\2\u00bd\u00bb\3\2\2\2\u00bd\u00bc\3\2\2\2"+
		"\u00be\u00c1\3\2\2\2\u00bf\u00bd\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00d6"+
		"\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c2\u00c5\59\35\2\u00c3\u00c5\5\67\34\2"+
		"\u00c4\u00c2\3\2\2\2\u00c4\u00c3\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6\u00c4"+
		"\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c9\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c9"+
		"\u00cc\t\7\2\2\u00ca\u00cd\59\35\2\u00cb\u00cd\5\67\34\2\u00cc\u00ca\3"+
		"\2\2\2\u00cc\u00cb\3\2\2\2\u00cd\u00d2\3\2\2\2\u00ce\u00d1\59\35\2\u00cf"+
		"\u00d1\5\67\34\2\u00d0\u00ce\3\2\2\2\u00d0\u00cf\3\2\2\2\u00d1\u00d4\3"+
		"\2\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4"+
		"\u00d2\3\2\2\2\u00d5\u00bf\3\2\2\2\u00d5\u00c6\3\2\2\2\u00d6\64\3\2\2"+
		"\2\u00d7\u00d9\t\b\2\2\u00d8\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00d8"+
		"\3\2\2\2\u00da\u00db\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00dd\b\33\2\2"+
		"\u00dd\66\3\2\2\2\u00de\u00df\t\4\2\2\u00df8\3\2\2\2\u00e0\u00e1\t\t\2"+
		"\2\u00e1:\3\2\2\2\27\2qy|\u0084\u008c\u0094\u009c\u009f\u00a6\u00af\u00b7"+
		"\u00bd\u00bf\u00c4\u00c6\u00cc\u00d0\u00d2\u00d5\u00da\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}